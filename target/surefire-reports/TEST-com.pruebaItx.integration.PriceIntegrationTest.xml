<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="com.pruebaItx.integration.PriceIntegrationTest" time="19.904" tests="20" errors="0" skipped="0" failures="17">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/test-classes:/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/classes:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.1/spring-boot-starter-web-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.1/spring-boot-starter-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.1/spring-boot-starter-logging-3.4.1.jar:/home/angelperez/.m2/repository/ch/qos/logback/logback-classic/1.5.12/logback-classic-1.5.12.jar:/home/angelperez/.m2/repository/ch/qos/logback/logback-core/1.5.12/logback-core-1.5.12.jar:/home/angelperez/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/home/angelperez/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/home/angelperez/.m2/repository/org/slf4j/jul-to-slf4j/2.0.16/jul-to-slf4j-2.0.16.jar:/home/angelperez/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/angelperez/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.1/spring-boot-starter-json-3.4.1.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.2/jackson-datatype-jdk8-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.2/jackson-datatype-jsr310-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.2/jackson-module-parameter-names-2.18.2.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.1/spring-boot-starter-tomcat-3.4.1.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.34/tomcat-embed-core-10.1.34.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.34/tomcat-embed-websocket-10.1.34.jar:/home/angelperez/.m2/repository/org/springframework/spring-web/6.2.1/spring-web-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-beans/6.2.1/spring-beans-6.2.1.jar:/home/angelperez/.m2/repository/io/micrometer/micrometer-observation/1.14.2/micrometer-observation-1.14.2.jar:/home/angelperez/.m2/repository/io/micrometer/micrometer-commons/1.14.2/micrometer-commons-1.14.2.jar:/home/angelperez/.m2/repository/org/springframework/spring-webmvc/6.2.1/spring-webmvc-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-context/6.2.1/spring-context-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-expression/6.2.1/spring-expression-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.1/spring-boot-starter-validation-3.4.1.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.34/tomcat-embed-el-10.1.34.jar:/home/angelperez/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/home/angelperez/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/home/angelperez/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/home/angelperez/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.4.1/spring-boot-starter-aop-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-aop/6.2.1/spring-aop-6.2.1.jar:/home/angelperez/.m2/repository/org/aspectj/aspectjweaver/1.9.22.1/aspectjweaver-1.9.22.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-data-jdbc/3.4.1/spring-boot-starter-data-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.1/spring-boot-starter-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/home/angelperez/.m2/repository/org/springframework/spring-jdbc/6.2.1/spring-jdbc-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-jdbc/3.4.1/spring-data-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-relational/3.4.1/spring-data-relational-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-commons/3.4.1/spring-data-commons-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-tx/6.2.1/spring-tx-6.2.1.jar:/home/angelperez/.m2/repository/org/slf4j/slf4j-api/2.0.16/slf4j-api-2.0.16.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.1/spring-boot-starter-data-jpa-3.4.1.jar:/home/angelperez/.m2/repository/org/hibernate/orm/hibernate-core/6.6.4.Final/hibernate-core-6.6.4.Final.jar:/home/angelperez/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/angelperez/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/angelperez/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/home/angelperez/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/home/angelperez/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/home/angelperez/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/home/angelperez/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/home/angelperez/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/angelperez/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-jpa/3.4.1/spring-data-jpa-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-orm/6.2.1/spring-orm-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-aspects/6.2.1/spring-aspects-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-devtools/3.4.1/spring-boot-devtools-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot/3.4.1/spring-boot-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.1/spring-boot-autoconfigure-3.4.1.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.7.0/springdoc-openapi-starter-webmvc-ui-2.7.0.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.7.0/springdoc-openapi-starter-webmvc-api-2.7.0.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.7.0/springdoc-openapi-starter-common-2.7.0.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.25/swagger-core-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/org/apache/commons/commons-lang3/3.17.0/commons-lang3-3.17.0.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.25/swagger-annotations-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.25/swagger-models-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.18.2/jackson-dataformat-yaml-2.18.2.jar:/home/angelperez/.m2/repository/org/webjars/swagger-ui/5.18.2/swagger-ui-5.18.2.jar:/home/angelperez/.m2/repository/org/webjars/webjars-locator-lite/1.0.1/webjars-locator-lite-1.0.1.jar:/home/angelperez/.m2/repository/org/jspecify/jspecify/1.0.0/jspecify-1.0.0.jar:/home/angelperez/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/home/angelperez/.m2/repository/org/openapitools/jackson-databind-nullable/0.2.6/jackson-databind-nullable-0.2.6.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.2/jackson-databind-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.2/jackson-annotations-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.2/jackson-core-2.18.2.jar:/home/angelperez/.m2/repository/org/mapstruct/mapstruct/1.6.3/mapstruct-1.6.3.jar:/home/angelperez/.m2/repository/org/projectlombok/lombok/1.18.36/lombok-1.18.36.jar:/home/angelperez/.m2/repository/com/google/code/gson/gson/2.11.0/gson-2.11.0.jar:/home/angelperez/.m2/repository/com/google/errorprone/error_prone_annotations/2.27.0/error_prone_annotations-2.27.0.jar:/home/angelperez/.m2/repository/jakarta/servlet/jakarta.servlet-api/6.0.0/jakarta.servlet-api-6.0.0.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.1/spring-boot-starter-test-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-test/3.4.1/spring-boot-test-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.1/spring-boot-test-autoconfigure-3.4.1.jar:/home/angelperez/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/home/angelperez/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/home/angelperez/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/home/angelperez/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/home/angelperez/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/home/angelperez/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/home/angelperez/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/home/angelperez/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/home/angelperez/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/home/angelperez/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/angelperez/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/home/angelperez/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/home/angelperez/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/home/angelperez/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/home/angelperez/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/angelperez/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/home/angelperez/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/home/angelperez/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/angelperez/.m2/repository/org/springframework/spring-core/6.2.1/spring-core-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-jcl/6.2.1/spring-jcl-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-test/6.2.1/spring-test-6.2.1.jar:/home/angelperez/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="user.timezone" value="Europe/Madrid"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Linux"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="APPLICATION_NAME" value="platform-test"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="ES"/>
    <property name="sun.boot.library.path" value="/home/angelperez/.jdks/corretto-17.0.15/lib"/>
    <property name="sun.java.command" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/surefire/surefirebooter-20250526161129426_3.jar /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/surefire 2025-05-26T16-11-29_365-jvmRun1 surefire-20250526161129426_1tmp surefire_0-20250526161129426_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/test-classes:/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/classes:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.1/spring-boot-starter-web-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.1/spring-boot-starter-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.1/spring-boot-starter-logging-3.4.1.jar:/home/angelperez/.m2/repository/ch/qos/logback/logback-classic/1.5.12/logback-classic-1.5.12.jar:/home/angelperez/.m2/repository/ch/qos/logback/logback-core/1.5.12/logback-core-1.5.12.jar:/home/angelperez/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/home/angelperez/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/home/angelperez/.m2/repository/org/slf4j/jul-to-slf4j/2.0.16/jul-to-slf4j-2.0.16.jar:/home/angelperez/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/angelperez/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.1/spring-boot-starter-json-3.4.1.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.2/jackson-datatype-jdk8-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.2/jackson-datatype-jsr310-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.2/jackson-module-parameter-names-2.18.2.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.1/spring-boot-starter-tomcat-3.4.1.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.34/tomcat-embed-core-10.1.34.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.34/tomcat-embed-websocket-10.1.34.jar:/home/angelperez/.m2/repository/org/springframework/spring-web/6.2.1/spring-web-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-beans/6.2.1/spring-beans-6.2.1.jar:/home/angelperez/.m2/repository/io/micrometer/micrometer-observation/1.14.2/micrometer-observation-1.14.2.jar:/home/angelperez/.m2/repository/io/micrometer/micrometer-commons/1.14.2/micrometer-commons-1.14.2.jar:/home/angelperez/.m2/repository/org/springframework/spring-webmvc/6.2.1/spring-webmvc-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-context/6.2.1/spring-context-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-expression/6.2.1/spring-expression-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.1/spring-boot-starter-validation-3.4.1.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.34/tomcat-embed-el-10.1.34.jar:/home/angelperez/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/home/angelperez/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/home/angelperez/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/home/angelperez/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.4.1/spring-boot-starter-aop-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-aop/6.2.1/spring-aop-6.2.1.jar:/home/angelperez/.m2/repository/org/aspectj/aspectjweaver/1.9.22.1/aspectjweaver-1.9.22.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-data-jdbc/3.4.1/spring-boot-starter-data-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.1/spring-boot-starter-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/home/angelperez/.m2/repository/org/springframework/spring-jdbc/6.2.1/spring-jdbc-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-jdbc/3.4.1/spring-data-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-relational/3.4.1/spring-data-relational-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-commons/3.4.1/spring-data-commons-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-tx/6.2.1/spring-tx-6.2.1.jar:/home/angelperez/.m2/repository/org/slf4j/slf4j-api/2.0.16/slf4j-api-2.0.16.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.1/spring-boot-starter-data-jpa-3.4.1.jar:/home/angelperez/.m2/repository/org/hibernate/orm/hibernate-core/6.6.4.Final/hibernate-core-6.6.4.Final.jar:/home/angelperez/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/angelperez/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/angelperez/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/home/angelperez/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/home/angelperez/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/home/angelperez/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/home/angelperez/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/home/angelperez/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/angelperez/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-jpa/3.4.1/spring-data-jpa-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-orm/6.2.1/spring-orm-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-aspects/6.2.1/spring-aspects-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-devtools/3.4.1/spring-boot-devtools-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot/3.4.1/spring-boot-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.1/spring-boot-autoconfigure-3.4.1.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.7.0/springdoc-openapi-starter-webmvc-ui-2.7.0.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.7.0/springdoc-openapi-starter-webmvc-api-2.7.0.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.7.0/springdoc-openapi-starter-common-2.7.0.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.25/swagger-core-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/org/apache/commons/commons-lang3/3.17.0/commons-lang3-3.17.0.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.25/swagger-annotations-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.25/swagger-models-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.18.2/jackson-dataformat-yaml-2.18.2.jar:/home/angelperez/.m2/repository/org/webjars/swagger-ui/5.18.2/swagger-ui-5.18.2.jar:/home/angelperez/.m2/repository/org/webjars/webjars-locator-lite/1.0.1/webjars-locator-lite-1.0.1.jar:/home/angelperez/.m2/repository/org/jspecify/jspecify/1.0.0/jspecify-1.0.0.jar:/home/angelperez/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/home/angelperez/.m2/repository/org/openapitools/jackson-databind-nullable/0.2.6/jackson-databind-nullable-0.2.6.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.2/jackson-databind-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.2/jackson-annotations-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.2/jackson-core-2.18.2.jar:/home/angelperez/.m2/repository/org/mapstruct/mapstruct/1.6.3/mapstruct-1.6.3.jar:/home/angelperez/.m2/repository/org/projectlombok/lombok/1.18.36/lombok-1.18.36.jar:/home/angelperez/.m2/repository/com/google/code/gson/gson/2.11.0/gson-2.11.0.jar:/home/angelperez/.m2/repository/com/google/errorprone/error_prone_annotations/2.27.0/error_prone_annotations-2.27.0.jar:/home/angelperez/.m2/repository/jakarta/servlet/jakarta.servlet-api/6.0.0/jakarta.servlet-api-6.0.0.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.1/spring-boot-starter-test-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-test/3.4.1/spring-boot-test-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.1/spring-boot-test-autoconfigure-3.4.1.jar:/home/angelperez/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/home/angelperez/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/home/angelperez/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/home/angelperez/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/home/angelperez/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/home/angelperez/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/home/angelperez/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/home/angelperez/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/home/angelperez/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/home/angelperez/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/angelperez/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/home/angelperez/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/home/angelperez/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/home/angelperez/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/home/angelperez/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/angelperez/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/home/angelperez/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/home/angelperez/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/angelperez/.m2/repository/org/springframework/spring-core/6.2.1/spring-core-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-jcl/6.2.1/spring-jcl-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-test/6.2.1/spring-test-6.2.1.jar:/home/angelperez/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/angelperez"/>
    <property name="user.language" value="es"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="/home/angelperez/.jdks/corretto-17.0.15"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/surefire/surefirebooter-20250526161129426_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.15+6-LTS"/>
    <property name="user.name" value="angelperez"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="6.11.0-26-generic"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.15.6.1"/>
    <property name="LOG_FILE" value="logs/platform-test.log"/>
    <property name="localRepository" value="/home/angelperez/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="idea.version" value="2025.1.1.1"/>
    <property name="com.zaxxer.hikari.pool_number" value="20"/>
    <property name="java.version" value="17.0.15"/>
    <property name="user.dir" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="180296"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.15+6-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} - %msg%n"/>
    <property name="LOGGED_APPLICATION_NAME" value="[platform-test] "/>
  </properties>
  <testcase name="shouldValidateRequestParameters_NegativeValues" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.399">
    <failure message="Status expected:&lt;400&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<400> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldValidateRequestParameters_NegativeValues(PriceIntegrationTest.java:437)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:37,832 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:37,834 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:37,835 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:42,535 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:42,551 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:45,376 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:45,378 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:45,427 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 8.469 seconds (process running for 15.947)
2025-05-26 16:11:45,432 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:45,596 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:45,767 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:45,791 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:45,792 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:45,794 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:45,795 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:45,797 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:45,801 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:45,801 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[-1], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:45,832 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldValidateRequestParameters_MissingParameters" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.04">
    <failure message="Status expected:&lt;400&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<400> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldValidateRequestParameters_MissingParameters(PriceIntegrationTest.java:381)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:45,894 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:45,895 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:45,895 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:46,248 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:46,249 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:46,498 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:46,499 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:46,509 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.667 seconds (process running for 17.029)
2025-05-26 16:11:46,510 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:46,518 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:46,522 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:46,524 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:46,525 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:46,526 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:46,527 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:46,528 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:46,532 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:46,533 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:46,545 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="test4_getPriceAt10_00OnDay15" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.051">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.test4_getPriceAt10_00OnDay15(PriceIntegrationTest.java:187)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:46,596 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:46,596 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:46,596 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:46,975 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:46,976 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:47,182 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:47,183 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:47,193 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.638 seconds (process running for 17.714)
2025-05-26 16:11:47,195 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:47,212 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:47,217 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:47,218 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:47,220 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:47,221 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:47,222 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:47,223 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:47,226 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:47,227 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-15T10:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:47,236 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="test1_getPriceAt10_00OnDay14" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.044">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.test1_getPriceAt10_00OnDay14(PriceIntegrationTest.java:124)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:47,315 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:47,315 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:47,315 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:47,628 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:47,629 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:47,987 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:47,989 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:48,007 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.739 seconds (process running for 18.527)
2025-05-26 16:11:48,009 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:48,023 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:48,031 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,033 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,035 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,036 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,038 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,040 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,043 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:48,043 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:48,053 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldReturn404WhenBrandNotFound" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.042">
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:48,111 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:48,111 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:48,111 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:48,487 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:48,488 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:48,698 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:48,699 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:48,709 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.65 seconds (process running for 19.229)
2025-05-26 16:11:48,710 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:48,718 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:48,722 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,724 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,725 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,727 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,728 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,729 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:48,731 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:48,731 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.
2025-05-26 16:11:48,739 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldReturnCorrectPriceForDifferentProduct" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.048">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldReturnCorrectPriceForDifferentProduct(PriceIntegrationTest.java:285)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:48,793 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:48,793 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:48,794 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:49,096 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:49,097 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:49,282 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:49,282 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:49,292 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.536 seconds (process running for 19.812)
2025-05-26 16:11:49,293 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:49,300 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:49,304 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,306 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,307 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,308 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,309 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,310 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,312 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:49,312 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[99999], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:49,317 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldHandleBoundaryDatesCorrectly_StartDate" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.028">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldHandleBoundaryDatesCorrectly_StartDate(PriceIntegrationTest.java:303)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:49,388 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:49,388 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:49,388 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:49,696 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:49,697 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:49,890 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:49,891 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:49,902 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.556 seconds (process running for 20.422)
2025-05-26 16:11:49,903 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:49,911 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:49,916 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,917 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,919 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,920 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,921 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,923 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:49,925 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:49,925 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T15:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:49,930 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldValidateRequestParameters_InvalidDateFormat" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.046">
    <failure message="Status expected:&lt;400&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<400> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldValidateRequestParameters_InvalidDateFormat(PriceIntegrationTest.java:368)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:49,978 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:49,978 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:49,978 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:50,265 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:50,265 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:50,441 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:50,442 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:50,458 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.522 seconds (process running for 20.979)
2025-05-26 16:11:50,460 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:50,470 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:50,473 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:50,474 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:50,475 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:50,477 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:50,478 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:50,479 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:50,482 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:50,482 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[invalid-date], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:50,489 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldPrioritizeHigherPriorityPrice" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.03">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldPrioritizeHigherPriorityPrice(PriceIntegrationTest.java:352)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:50,539 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:50,539 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:50,539 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:50,790 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:50,791 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:50,994 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:50,994 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:51,003 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.492 seconds (process running for 21.523)
2025-05-26 16:11:51,004 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:51,012 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:51,016 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,019 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,020 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,021 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,023 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,024 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,026 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:51,026 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T16:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:51,031 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldHandleBoundaryDatesCorrectly_OneSecondAfterEnd" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.05">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldHandleBoundaryDatesCorrectly_OneSecondAfterEnd(PriceIntegrationTest.java:335)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:51,071 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:51,071 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:51,071 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:51,319 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:51,319 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:51,470 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:51,471 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:51,479 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.441 seconds (process running for 21.999)
2025-05-26 16:11:51,480 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:51,486 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:51,490 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,491 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,493 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,494 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,494 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,495 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,497 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:51,497 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T18:30:01], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:51,501 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldReturn404WhenProductNotFound" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.036">
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:51,561 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:51,562 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:51,562 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:51,800 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:51,801 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:51,973 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:51,973 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:51,981 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.448 seconds (process running for 22.501)
2025-05-26 16:11:51,982 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:51,988 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:51,993 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,994 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,996 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,997 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,998 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:51,999 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,001 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:52,002 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.
2025-05-26 16:11:52,007 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="test2_getPriceAt16_00OnDay14" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.024">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.test2_getPriceAt16_00OnDay14(PriceIntegrationTest.java:145)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:52,046 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:52,046 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:52,046 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:52,292 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:52,293 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:52,470 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:52,470 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:52,478 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.456 seconds (process running for 22.998)
2025-05-26 16:11:52,479 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:52,485 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:52,488 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,489 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,490 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,492 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,493 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,494 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,496 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:52,497 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T16:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:52,501 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldHandleBoundaryDatesCorrectly_EndDate" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.041">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldHandleBoundaryDatesCorrectly_EndDate(PriceIntegrationTest.java:319)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:52,530 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:52,530 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:52,530 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:52,757 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:52,757 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:52,921 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:52,922 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:52,929 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.423 seconds (process running for 23.449)
2025-05-26 16:11:52,930 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:52,937 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:52,942 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,943 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,945 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,946 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,947 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,949 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:52,950 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:52,951 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T18:30:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:52,956 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="test5_getPriceAt21_00OnDay16" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.021">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.test5_getPriceAt21_00OnDay16(PriceIntegrationTest.java:208)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:53,003 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:53,003 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:53,003 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:53,222 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:53,223 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:53,389 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:53,390 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:53,396 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.421 seconds (process running for 23.917)
2025-05-26 16:11:53,397 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:53,403 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:53,406 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,407 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,408 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,409 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,410 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,410 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,412 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:53,412 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-16T21:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:53,415 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="test3_getPriceAt21_00OnDay14" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.033">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.test3_getPriceAt21_00OnDay14(PriceIntegrationTest.java:166)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:53,445 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:53,445 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:53,445 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:53,648 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:53,649 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:53,820 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:53,821 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:53,829 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.407 seconds (process running for 24.35)
2025-05-26 16:11:53,830 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:53,838 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:53,842 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,845 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,846 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,847 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,848 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,849 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:53,851 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:53,851 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T21:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:53,855 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldValidateRequestParameters_InvalidParameterTypes" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.05">
    <failure message="Status expected:&lt;400&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<400> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldValidateRequestParameters_InvalidParameterTypes(PriceIntegrationTest.java:413)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:53,894 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:53,894 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:53,894 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:54,151 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:54,152 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:54,369 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:54,369 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:54,377 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.506 seconds (process running for 24.897)
2025-05-26 16:11:54,378 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:54,384 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:54,387 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,389 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,390 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,391 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,391 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,392 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,394 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:54,394 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[not-a-number], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:54,398 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldReturn404WhenNoPriceFound" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.05">
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:54,452 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:54,452 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:54,452 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:54,658 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:54,659 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:54,822 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:54,823 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 1 ms
2025-05-26 16:11:54,831 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.4 seconds (process running for 25.351)
2025-05-26 16:11:54,831 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:54,837 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:54,841 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,843 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,844 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,844 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,845 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,846 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:54,848 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:54,848 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.
2025-05-26 16:11:54,852 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldReturnCorrectPriceForDifferentBrand" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.028">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldReturnCorrectPriceForDifferentBrand(PriceIntegrationTest.java:268)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:54,912 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:54,913 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:54,913 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:55,112 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:55,113 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:55,265 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:55,266 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:55,273 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.387 seconds (process running for 25.793)
2025-05-26 16:11:55,273 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:55,281 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:55,285 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,286 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,287 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,288 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,288 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,289 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,291 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:55,291 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[35455], brandId=[2]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:55,295 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldHandleConcurrentRequestsCorrectly" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.026">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldHandleConcurrentRequestsCorrectly(PriceIntegrationTest.java:463)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:55,328 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:55,328 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:55,329 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:55,527 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:55,528 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:55,686 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:55,687 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:55,694 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.388 seconds (process running for 26.214)
2025-05-26 16:11:55,695 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:55,700 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:55,703 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,704 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,705 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,706 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,706 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,707 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:55,708 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:55,709 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:55,712 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
  <testcase name="shouldReturnConsistentResultsForSameRequest" classname="com.pruebaItx.integration.PriceIntegrationTest" time="0.017">
    <failure message="Status expected:&lt;200&gt; but was:&lt;404&gt;" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Status expected:<200> but was:<404>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.integration.PriceIntegrationTest.shouldReturnConsistentResultsForSameRequest(PriceIntegrationTest.java:480)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:55,749 [main] INFO  c.p.i.PriceIntegrationTest - Starting PriceIntegrationTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:55,749 [main] DEBUG c.p.i.PriceIntegrationTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:55,749 [main] INFO  c.p.i.PriceIntegrationTest - The following 1 profile is active: "test"
2025-05-26 16:11:55,963 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:55,964 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:56,098 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:56,098 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:56,105 [main] INFO  c.p.i.PriceIntegrationTest - Started PriceIntegrationTest in 0.381 seconds (process running for 26.626)
2025-05-26 16:11:56,106 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:56,112 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0
2025-05-26 16:11:56,114 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:56,115 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:56,116 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:56,117 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:56,117 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:56,118 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        prices
        (brand_id, curr, end_date, price, price_list, priority, product_id, start_date, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
2025-05-26 16:11:56,119 [main] WARN  o.s.web.servlet.PageNotFound - No mapping for GET /api/prices
2025-05-26 16:11:56,119 [main] WARN  o.s.web.servlet.PageNotFound - No endpoint GET /api/prices.

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/prices
       Parameters = {applicationDate=[2020-06-14T16:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.servlet.NoHandlerFoundException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = No endpoint GET /api/prices.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
2025-05-26 16:11:56,123 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
]]></system-out>
  </testcase>
</testsuite>