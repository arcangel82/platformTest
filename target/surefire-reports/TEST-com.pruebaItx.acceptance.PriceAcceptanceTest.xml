<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" version="3.0.2" name="com.pruebaItx.acceptance.PriceAcceptanceTest" time="1.553" tests="15" errors="0" skipped="0" failures="13">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/test-classes:/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/classes:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.1/spring-boot-starter-web-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.1/spring-boot-starter-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.1/spring-boot-starter-logging-3.4.1.jar:/home/angelperez/.m2/repository/ch/qos/logback/logback-classic/1.5.12/logback-classic-1.5.12.jar:/home/angelperez/.m2/repository/ch/qos/logback/logback-core/1.5.12/logback-core-1.5.12.jar:/home/angelperez/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/home/angelperez/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/home/angelperez/.m2/repository/org/slf4j/jul-to-slf4j/2.0.16/jul-to-slf4j-2.0.16.jar:/home/angelperez/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/angelperez/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.1/spring-boot-starter-json-3.4.1.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.2/jackson-datatype-jdk8-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.2/jackson-datatype-jsr310-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.2/jackson-module-parameter-names-2.18.2.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.1/spring-boot-starter-tomcat-3.4.1.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.34/tomcat-embed-core-10.1.34.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.34/tomcat-embed-websocket-10.1.34.jar:/home/angelperez/.m2/repository/org/springframework/spring-web/6.2.1/spring-web-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-beans/6.2.1/spring-beans-6.2.1.jar:/home/angelperez/.m2/repository/io/micrometer/micrometer-observation/1.14.2/micrometer-observation-1.14.2.jar:/home/angelperez/.m2/repository/io/micrometer/micrometer-commons/1.14.2/micrometer-commons-1.14.2.jar:/home/angelperez/.m2/repository/org/springframework/spring-webmvc/6.2.1/spring-webmvc-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-context/6.2.1/spring-context-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-expression/6.2.1/spring-expression-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.1/spring-boot-starter-validation-3.4.1.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.34/tomcat-embed-el-10.1.34.jar:/home/angelperez/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/home/angelperez/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/home/angelperez/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/home/angelperez/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.4.1/spring-boot-starter-aop-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-aop/6.2.1/spring-aop-6.2.1.jar:/home/angelperez/.m2/repository/org/aspectj/aspectjweaver/1.9.22.1/aspectjweaver-1.9.22.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-data-jdbc/3.4.1/spring-boot-starter-data-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.1/spring-boot-starter-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/home/angelperez/.m2/repository/org/springframework/spring-jdbc/6.2.1/spring-jdbc-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-jdbc/3.4.1/spring-data-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-relational/3.4.1/spring-data-relational-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-commons/3.4.1/spring-data-commons-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-tx/6.2.1/spring-tx-6.2.1.jar:/home/angelperez/.m2/repository/org/slf4j/slf4j-api/2.0.16/slf4j-api-2.0.16.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.1/spring-boot-starter-data-jpa-3.4.1.jar:/home/angelperez/.m2/repository/org/hibernate/orm/hibernate-core/6.6.4.Final/hibernate-core-6.6.4.Final.jar:/home/angelperez/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/angelperez/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/angelperez/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/home/angelperez/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/home/angelperez/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/home/angelperez/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/home/angelperez/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/home/angelperez/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/angelperez/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-jpa/3.4.1/spring-data-jpa-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-orm/6.2.1/spring-orm-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-aspects/6.2.1/spring-aspects-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-devtools/3.4.1/spring-boot-devtools-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot/3.4.1/spring-boot-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.1/spring-boot-autoconfigure-3.4.1.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.7.0/springdoc-openapi-starter-webmvc-ui-2.7.0.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.7.0/springdoc-openapi-starter-webmvc-api-2.7.0.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.7.0/springdoc-openapi-starter-common-2.7.0.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.25/swagger-core-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/org/apache/commons/commons-lang3/3.17.0/commons-lang3-3.17.0.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.25/swagger-annotations-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.25/swagger-models-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.18.2/jackson-dataformat-yaml-2.18.2.jar:/home/angelperez/.m2/repository/org/webjars/swagger-ui/5.18.2/swagger-ui-5.18.2.jar:/home/angelperez/.m2/repository/org/webjars/webjars-locator-lite/1.0.1/webjars-locator-lite-1.0.1.jar:/home/angelperez/.m2/repository/org/jspecify/jspecify/1.0.0/jspecify-1.0.0.jar:/home/angelperez/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/home/angelperez/.m2/repository/org/openapitools/jackson-databind-nullable/0.2.6/jackson-databind-nullable-0.2.6.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.2/jackson-databind-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.2/jackson-annotations-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.2/jackson-core-2.18.2.jar:/home/angelperez/.m2/repository/org/mapstruct/mapstruct/1.6.3/mapstruct-1.6.3.jar:/home/angelperez/.m2/repository/org/projectlombok/lombok/1.18.36/lombok-1.18.36.jar:/home/angelperez/.m2/repository/com/google/code/gson/gson/2.11.0/gson-2.11.0.jar:/home/angelperez/.m2/repository/com/google/errorprone/error_prone_annotations/2.27.0/error_prone_annotations-2.27.0.jar:/home/angelperez/.m2/repository/jakarta/servlet/jakarta.servlet-api/6.0.0/jakarta.servlet-api-6.0.0.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.1/spring-boot-starter-test-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-test/3.4.1/spring-boot-test-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.1/spring-boot-test-autoconfigure-3.4.1.jar:/home/angelperez/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/home/angelperez/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/home/angelperez/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/home/angelperez/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/home/angelperez/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/home/angelperez/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/home/angelperez/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/home/angelperez/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/home/angelperez/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/home/angelperez/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/angelperez/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/home/angelperez/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/home/angelperez/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/home/angelperez/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/home/angelperez/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/angelperez/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/home/angelperez/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/home/angelperez/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/angelperez/.m2/repository/org/springframework/spring-core/6.2.1/spring-core-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-jcl/6.2.1/spring-jcl-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-test/6.2.1/spring-test-6.2.1.jar:/home/angelperez/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:"/>
    <property name="java.vm.vendor" value="Amazon.com Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://aws.amazon.com/corretto/"/>
    <property name="catalina.useNaming" value="false"/>
    <property name="user.timezone" value="Europe/Madrid"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Linux"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="APPLICATION_NAME" value="platform-test"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="ES"/>
    <property name="sun.boot.library.path" value="/home/angelperez/.jdks/corretto-17.0.15/lib"/>
    <property name="sun.java.command" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/surefire/surefirebooter-20250526161129426_3.jar /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/surefire 2025-05-26T16-11-29_365-jvmRun1 surefire-20250526161129426_1tmp surefire_0-20250526161129426_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/test-classes:/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/classes:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-web/3.4.1/spring-boot-starter-web-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.1/spring-boot-starter-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.1/spring-boot-starter-logging-3.4.1.jar:/home/angelperez/.m2/repository/ch/qos/logback/logback-classic/1.5.12/logback-classic-1.5.12.jar:/home/angelperez/.m2/repository/ch/qos/logback/logback-core/1.5.12/logback-core-1.5.12.jar:/home/angelperez/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/home/angelperez/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/home/angelperez/.m2/repository/org/slf4j/jul-to-slf4j/2.0.16/jul-to-slf4j-2.0.16.jar:/home/angelperez/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/angelperez/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.1/spring-boot-starter-json-3.4.1.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.2/jackson-datatype-jdk8-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.2/jackson-datatype-jsr310-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.2/jackson-module-parameter-names-2.18.2.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/3.4.1/spring-boot-starter-tomcat-3.4.1.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/10.1.34/tomcat-embed-core-10.1.34.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/10.1.34/tomcat-embed-websocket-10.1.34.jar:/home/angelperez/.m2/repository/org/springframework/spring-web/6.2.1/spring-web-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-beans/6.2.1/spring-beans-6.2.1.jar:/home/angelperez/.m2/repository/io/micrometer/micrometer-observation/1.14.2/micrometer-observation-1.14.2.jar:/home/angelperez/.m2/repository/io/micrometer/micrometer-commons/1.14.2/micrometer-commons-1.14.2.jar:/home/angelperez/.m2/repository/org/springframework/spring-webmvc/6.2.1/spring-webmvc-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-context/6.2.1/spring-context-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-expression/6.2.1/spring-expression-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-validation/3.4.1/spring-boot-starter-validation-3.4.1.jar:/home/angelperez/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/10.1.34/tomcat-embed-el-10.1.34.jar:/home/angelperez/.m2/repository/org/hibernate/validator/hibernate-validator/8.0.2.Final/hibernate-validator-8.0.2.Final.jar:/home/angelperez/.m2/repository/jakarta/validation/jakarta.validation-api/3.0.2/jakarta.validation-api-3.0.2.jar:/home/angelperez/.m2/repository/org/jboss/logging/jboss-logging/3.6.1.Final/jboss-logging-3.6.1.Final.jar:/home/angelperez/.m2/repository/com/fasterxml/classmate/1.7.0/classmate-1.7.0.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-aop/3.4.1/spring-boot-starter-aop-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-aop/6.2.1/spring-aop-6.2.1.jar:/home/angelperez/.m2/repository/org/aspectj/aspectjweaver/1.9.22.1/aspectjweaver-1.9.22.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-data-jdbc/3.4.1/spring-boot-starter-data-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.4.1/spring-boot-starter-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/com/zaxxer/HikariCP/5.1.0/HikariCP-5.1.0.jar:/home/angelperez/.m2/repository/org/springframework/spring-jdbc/6.2.1/spring-jdbc-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-jdbc/3.4.1/spring-data-jdbc-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-relational/3.4.1/spring-data-relational-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-commons/3.4.1/spring-data-commons-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-tx/6.2.1/spring-tx-6.2.1.jar:/home/angelperez/.m2/repository/org/slf4j/slf4j-api/2.0.16/slf4j-api-2.0.16.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/3.4.1/spring-boot-starter-data-jpa-3.4.1.jar:/home/angelperez/.m2/repository/org/hibernate/orm/hibernate-core/6.6.4.Final/hibernate-core-6.6.4.Final.jar:/home/angelperez/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/angelperez/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/angelperez/.m2/repository/org/hibernate/common/hibernate-commons-annotations/7.0.3.Final/hibernate-commons-annotations-7.0.3.Final.jar:/home/angelperez/.m2/repository/io/smallrye/jandex/3.2.0/jandex-3.2.0.jar:/home/angelperez/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.5/jaxb-runtime-4.0.5.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.5/jaxb-core-4.0.5.jar:/home/angelperez/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/home/angelperez/.m2/repository/org/glassfish/jaxb/txw2/4.0.5/txw2-4.0.5.jar:/home/angelperez/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.2/istack-commons-runtime-4.1.2.jar:/home/angelperez/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/angelperez/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/angelperez/.m2/repository/org/springframework/data/spring-data-jpa/3.4.1/spring-data-jpa-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-orm/6.2.1/spring-orm-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-aspects/6.2.1/spring-aspects-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-devtools/3.4.1/spring-boot-devtools-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot/3.4.1/spring-boot-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.1/spring-boot-autoconfigure-3.4.1.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-ui/2.7.0/springdoc-openapi-starter-webmvc-ui-2.7.0.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-webmvc-api/2.7.0/springdoc-openapi-starter-webmvc-api-2.7.0.jar:/home/angelperez/.m2/repository/org/springdoc/springdoc-openapi-starter-common/2.7.0/springdoc-openapi-starter-common-2.7.0.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-core-jakarta/2.2.25/swagger-core-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/org/apache/commons/commons-lang3/3.17.0/commons-lang3-3.17.0.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-annotations-jakarta/2.2.25/swagger-annotations-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/io/swagger/core/v3/swagger-models-jakarta/2.2.25/swagger-models-jakarta-2.2.25.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.18.2/jackson-dataformat-yaml-2.18.2.jar:/home/angelperez/.m2/repository/org/webjars/swagger-ui/5.18.2/swagger-ui-5.18.2.jar:/home/angelperez/.m2/repository/org/webjars/webjars-locator-lite/1.0.1/webjars-locator-lite-1.0.1.jar:/home/angelperez/.m2/repository/org/jspecify/jspecify/1.0.0/jspecify-1.0.0.jar:/home/angelperez/.m2/repository/com/h2database/h2/2.3.232/h2-2.3.232.jar:/home/angelperez/.m2/repository/org/openapitools/jackson-databind-nullable/0.2.6/jackson-databind-nullable-0.2.6.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.2/jackson-databind-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.2/jackson-annotations-2.18.2.jar:/home/angelperez/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.2/jackson-core-2.18.2.jar:/home/angelperez/.m2/repository/org/mapstruct/mapstruct/1.6.3/mapstruct-1.6.3.jar:/home/angelperez/.m2/repository/org/projectlombok/lombok/1.18.36/lombok-1.18.36.jar:/home/angelperez/.m2/repository/com/google/code/gson/gson/2.11.0/gson-2.11.0.jar:/home/angelperez/.m2/repository/com/google/errorprone/error_prone_annotations/2.27.0/error_prone_annotations-2.27.0.jar:/home/angelperez/.m2/repository/jakarta/servlet/jakarta.servlet-api/6.0.0/jakarta.servlet-api-6.0.0.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.1/spring-boot-starter-test-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-test/3.4.1/spring-boot-test-3.4.1.jar:/home/angelperez/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.1/spring-boot-test-autoconfigure-3.4.1.jar:/home/angelperez/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/home/angelperez/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/home/angelperez/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/home/angelperez/.m2/repository/net/minidev/json-smart/2.5.1/json-smart-2.5.1.jar:/home/angelperez/.m2/repository/net/minidev/accessors-smart/2.5.1/accessors-smart-2.5.1.jar:/home/angelperez/.m2/repository/org/ow2/asm/asm/9.6/asm-9.6.jar:/home/angelperez/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/home/angelperez/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/home/angelperez/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/home/angelperez/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/angelperez/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/home/angelperez/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/home/angelperez/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/home/angelperez/.m2/repository/org/mockito/mockito-core/5.14.2/mockito-core-5.14.2.jar:/home/angelperez/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/home/angelperez/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/angelperez/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.2/mockito-junit-jupiter-5.14.2.jar:/home/angelperez/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/home/angelperez/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/angelperez/.m2/repository/org/springframework/spring-core/6.2.1/spring-core-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-jcl/6.2.1/spring-jcl-6.2.1.jar:/home/angelperez/.m2/repository/org/springframework/spring-test/6.2.1/spring-test-6.2.1.jar:/home/angelperez/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/angelperez"/>
    <property name="user.language" value="es"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="/home/angelperez/.jdks/corretto-17.0.15"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico/target/surefire/surefirebooter-20250526161129426_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.15+6-LTS"/>
    <property name="user.name" value="angelperez"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="6.11.0-26-generic"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Corretto-17.0.15.6.1"/>
    <property name="LOG_FILE" value="logs/platform-test.log"/>
    <property name="localRepository" value="/home/angelperez/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/corretto/corretto-17/issues/"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="idea.version" value="2025.1.1.1"/>
    <property name="com.zaxxer.hikari.pool_number" value="21"/>
    <property name="catalina.home" value="/tmp/tomcat.0.9627759487440187557"/>
    <property name="java.version" value="17.0.15"/>
    <property name="user.dir" value="/home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="180296"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="catalina.base" value="/tmp/tomcat.0.9627759487440187557"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Amazon.com Inc."/>
    <property name="java.vm.version" value="17.0.15+6-LTS"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} - %msg%n"/>
    <property name="LOGGED_APPLICATION_NAME" value="[platform-test] "/>
  </properties>
  <testcase name="shouldHandleRequestAtExactEndTime" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.351">
    <system-out><![CDATA[2025-05-26 16:11:56,150 [main] INFO  o.s.t.c.s.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.pruebaItx.acceptance.PriceAcceptanceTest]: PriceAcceptanceTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.1)

2025-05-26 16:11:56,201 [main] INFO  c.p.acceptance.PriceAcceptanceTest - Starting PriceAcceptanceTest using Java 17.0.15 with PID 180296 (started by angelperez in /home/angelperez/Desarrollo/apps/TestProjects/ITX_Plataforma_CasoPractico)
2025-05-26 16:11:56,201 [main] DEBUG c.p.acceptance.PriceAcceptanceTest - Running with Spring Boot v3.4.1, Spring v6.2.1
2025-05-26 16:11:56,201 [main] INFO  c.p.acceptance.PriceAcceptanceTest - The following 1 profile is active: "test"
2025-05-26 16:11:56,805 [main] DEBUG org.hibernate.SQL - 
    drop table if exists prices cascade 
Hibernate: 
    drop table if exists prices cascade 
2025-05-26 16:11:56,805 [main] DEBUG org.hibernate.SQL - 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table prices (
        curr varchar(3) not null,
        price numeric(10,2) not null,
        price_list integer not null,
        priority integer not null,
        brand_id bigint not null,
        end_date timestamp(6) not null,
        id bigint generated by default as identity,
        product_id bigint not null,
        start_date timestamp(6) not null,
        primary key (id)
    )
2025-05-26 16:11:56,929 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Initializing Servlet ''
2025-05-26 16:11:56,929 [main] INFO  o.s.t.w.s.TestDispatcherServlet - Completed initialization in 0 ms
2025-05-26 16:11:57,175 [main] INFO  c.p.acceptance.PriceAcceptanceTest - Started PriceAcceptanceTest in 1.013 seconds (process running for 27.695)
2025-05-26 16:11:57,176 [main] INFO  com.pruebaItx.PruebaItxApplication - Application started and ready to receive requests
2025-05-26 16:11:57,307 [main] DEBUG c.p.i.a.in.web.PriceController - Request to getProductPrice: applicationDate=2020-06-14T18:30, productId=35455, brandId=1
2025-05-26 16:11:57,310 [main] DEBUG c.p.a.service.PriceService - Getting applicable price for brand: 1, product: 35455, date: 2020-06-14T18:30
2025-05-26 16:11:57,346 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
2025-05-26 16:11:57,352 [main] DEBUG c.p.a.service.PriceService - Selected price with priority 1 and value 25.45
]]></system-out>
  </testcase>
  <testcase name="shouldHandleRequestAtExactStartTime" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.015">
    <system-out><![CDATA[2025-05-26 16:11:57,534 [main] DEBUG c.p.i.a.in.web.PriceController - Request to getProductPrice: applicationDate=2020-06-14T15:00, productId=35455, brandId=1
2025-05-26 16:11:57,534 [main] DEBUG c.p.a.service.PriceService - Getting applicable price for brand: 1, product: 35455, date: 2020-06-14T15:00
2025-05-26 16:11:57,536 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
2025-05-26 16:11:57,538 [main] DEBUG c.p.a.service.PriceService - Selected price with priority 1 and value 25.45
]]></system-out>
  </testcase>
  <testcase name="shouldReturn400WhenApplicationDateFormatIsInvalid" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.012">
    <failure message="Content type not set" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Content type not set
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.AssertionErrors.assertTrue(AssertionErrors.java:73)
	at org.springframework.test.util.AssertionErrors.assertNotNull(AssertionErrors.java:112)
	at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$contentType$0(ContentResultMatchers.java:85)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturn400WhenApplicationDateFormatIsInvalid(PriceAcceptanceTest.java:220)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,557 [main] WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'applicationDate': Failed to convert value of type 'java.lang.String' to required type 'java.time.LocalDateTime'; Failed to convert from type [java.lang.String] to type [@jakarta.validation.constraints.NotNull @io.swagger.v3.oas.annotations.Parameter @jakarta.validation.Valid @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime] for value [invalid-date]]

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[invalid-date], productId=[35455], brandId=[1]}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturn400WhenApplicationDateIsMissing" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.007">
    <failure message="Content type not set" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Content type not set
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.AssertionErrors.assertTrue(AssertionErrors.java:73)
	at org.springframework.test.util.AssertionErrors.assertNotNull(AssertionErrors.java:112)
	at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$contentType$0(ContentResultMatchers.java:85)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturn400WhenApplicationDateIsMissing(PriceAcceptanceTest.java:152)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,566 [main] WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'applicationDate' for method parameter type LocalDateTime is not present]

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {productId=[35455], brandId=[1]}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MissingServletRequestParameterException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = Required parameter 'applicationDate' is not present.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturn400WhenBrandIdIsNotValidNumber" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.008">
    <failure message="Content type not set" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Content type not set
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.AssertionErrors.assertTrue(AssertionErrors.java:73)
	at org.springframework.test.util.AssertionErrors.assertNotNull(AssertionErrors.java:112)
	at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$contentType$0(ContentResultMatchers.java:85)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturn400WhenBrandIdIsNotValidNumber(PriceAcceptanceTest.java:266)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,573 [main] WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'brandId': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "not-a-number"]

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[35455], brandId=[not-a-number]}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturn400WhenBrandIdIsMissing" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.007">
    <failure message="Content type not set" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Content type not set
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.AssertionErrors.assertTrue(AssertionErrors.java:73)
	at org.springframework.test.util.AssertionErrors.assertNotNull(AssertionErrors.java:112)
	at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$contentType$0(ContentResultMatchers.java:85)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturn400WhenBrandIdIsMissing(PriceAcceptanceTest.java:199)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,582 [main] WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'brandId' for method parameter type Long is not present]

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[35455]}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MissingServletRequestParameterException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = Required parameter 'brandId' is not present.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturn400WhenProductIdIsNotValidNumber" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.007">
    <failure message="Content type not set" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Content type not set
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.AssertionErrors.assertTrue(AssertionErrors.java:73)
	at org.springframework.test.util.AssertionErrors.assertNotNull(AssertionErrors.java:112)
	at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$contentType$0(ContentResultMatchers.java:85)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturn400WhenProductIdIsNotValidNumber(PriceAcceptanceTest.java:243)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,590 [main] WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'productId': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "not-a-number"]

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[not-a-number], brandId=[1]}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.method.annotation.MethodArgumentTypeMismatchException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturn400WhenProductIdIsMissing" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.006">
    <failure message="Content type not set" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Content type not set
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.AssertionErrors.assertTrue(AssertionErrors.java:73)
	at org.springframework.test.util.AssertionErrors.assertNotNull(AssertionErrors.java:112)
	at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$contentType$0(ContentResultMatchers.java:85)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturn400WhenProductIdIsMissing(PriceAcceptanceTest.java:179)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,598 [main] WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.bind.MissingServletRequestParameterException: Required request parameter 'productId' for method parameter type Long is not present]

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], brandId=[1]}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = org.springframework.web.bind.MissingServletRequestParameterException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 400
    Error message = Required parameter 'productId' is not present.
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturn404WhenNoPriceFound" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.01">
    <failure message="Content type not set" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Content type not set
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.AssertionErrors.assertTrue(AssertionErrors.java:73)
	at org.springframework.test.util.AssertionErrors.assertNotNull(AssertionErrors.java:112)
	at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$contentType$0(ContentResultMatchers.java:85)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturn404WhenNoPriceFound(PriceAcceptanceTest.java:289)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,605 [main] DEBUG c.p.i.a.in.web.PriceController - Request to getProductPrice: applicationDate=2019-06-14T10:00, productId=99999, brandId=99
2025-05-26 16:11:57,605 [main] DEBUG c.p.a.service.PriceService - Getting applicable price for brand: 99, product: 99999, date: 2019-06-14T10:00
2025-05-26 16:11:57,606 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
2025-05-26 16:11:57,607 [main] WARN  c.p.a.service.PriceService - No price found for brand: 99, product: 99999, date: 2019-06-14T10:00
2025-05-26 16:11:57,607 [main] INFO  c.p.i.a.in.web.PriceController - No price found for applicationDate=2019-06-14T10:00, productId=99999, brandId=99. Reason: No price found for brand 99, product 99999 at date 2019-06-14T10:00

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2019-06-14T10:00:00], productId=[99999], brandId=[99]}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturn404WhenProductExistsButNoPriceForDate" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.01">
    <failure message="Content type not set" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Content type not set
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.AssertionErrors.assertTrue(AssertionErrors.java:73)
	at org.springframework.test.util.AssertionErrors.assertNotNull(AssertionErrors.java:112)
	at org.springframework.test.web.servlet.result.ContentResultMatchers.lambda$contentType$0(ContentResultMatchers.java:85)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturn404WhenProductExistsButNoPriceForDate(PriceAcceptanceTest.java:313)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,617 [main] DEBUG c.p.i.a.in.web.PriceController - Request to getProductPrice: applicationDate=2019-01-01T10:00, productId=35455, brandId=1
2025-05-26 16:11:57,617 [main] DEBUG c.p.a.service.PriceService - Getting applicable price for brand: 1, product: 35455, date: 2019-01-01T10:00
2025-05-26 16:11:57,617 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
2025-05-26 16:11:57,618 [main] WARN  c.p.a.service.PriceService - No price found for brand: 1, product: 35455, date: 2019-01-01T10:00
2025-05-26 16:11:57,619 [main] INFO  c.p.i.a.in.web.PriceController - No price found for applicationDate=2019-01-01T10:00, productId=35455, brandId=1. Reason: No price found for brand 1, product 35455 at date 2019-01-01T10:00

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2019-01-01T10:00:00], productId=[35455], brandId=[1]}
          Headers = [Accept:"application/json"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 404
    Error message = null
          Headers = []
     Content type = null
             Body = 
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturnPriceAt10AMOnDay14" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.015">
    <failure message="Got a list of values [2020,6,14,0,0] instead of the expected single value 2020-06-14T00:00:00" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Got a list of values [2020,6,14,0,0] instead of the expected single value 2020-06-14T00:00:00
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:154)
	at org.springframework.test.web.servlet.result.JsonPathResultMatchers.lambda$value$2(JsonPathResultMatchers.java:112)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturnPriceAt10AMOnDay14(PriceAcceptanceTest.java:54)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,628 [main] DEBUG c.p.i.a.in.web.PriceController - Request to getProductPrice: applicationDate=2020-06-14T10:00, productId=35455, brandId=1
2025-05-26 16:11:57,628 [main] DEBUG c.p.a.service.PriceService - Getting applicable price for brand: 1, product: 35455, date: 2020-06-14T10:00
2025-05-26 16:11:57,629 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
2025-05-26 16:11:57,631 [main] DEBUG c.p.a.service.PriceService - Selected price with priority 0 and value 35.50

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2020-06-14T10:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"productId":35455,"brandId":1,"priceList":1,"startDate":[2020,6,14,0,0],"endDate":[2020,12,31,23,59,59],"price":35.5}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturnPriceAt4PMOnDay14" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.013">
    <failure message="Got a list of values [2020,6,14,15,0] instead of the expected single value 2020-06-14T15:00:00" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Got a list of values [2020,6,14,15,0] instead of the expected single value 2020-06-14T15:00:00
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:154)
	at org.springframework.test.web.servlet.result.JsonPathResultMatchers.lambda$value$2(JsonPathResultMatchers.java:112)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturnPriceAt4PMOnDay14(PriceAcceptanceTest.java:74)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,643 [main] DEBUG c.p.i.a.in.web.PriceController - Request to getProductPrice: applicationDate=2020-06-14T16:00, productId=35455, brandId=1
2025-05-26 16:11:57,643 [main] DEBUG c.p.a.service.PriceService - Getting applicable price for brand: 1, product: 35455, date: 2020-06-14T16:00
2025-05-26 16:11:57,644 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
2025-05-26 16:11:57,646 [main] DEBUG c.p.a.service.PriceService - Selected price with priority 1 and value 25.45

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2020-06-14T16:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"productId":35455,"brandId":1,"priceList":2,"startDate":[2020,6,14,15,0],"endDate":[2020,6,14,18,30],"price":25.45}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturnPriceAt9PMOnDay14" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.015">
    <failure message="Got a list of values [2020,6,14,0,0] instead of the expected single value 2020-06-14T00:00:00" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Got a list of values [2020,6,14,0,0] instead of the expected single value 2020-06-14T00:00:00
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:154)
	at org.springframework.test.web.servlet.result.JsonPathResultMatchers.lambda$value$2(JsonPathResultMatchers.java:112)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturnPriceAt9PMOnDay14(PriceAcceptanceTest.java:94)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,658 [main] DEBUG c.p.i.a.in.web.PriceController - Request to getProductPrice: applicationDate=2020-06-14T21:00, productId=35455, brandId=1
2025-05-26 16:11:57,659 [main] DEBUG c.p.a.service.PriceService - Getting applicable price for brand: 1, product: 35455, date: 2020-06-14T21:00
2025-05-26 16:11:57,660 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
2025-05-26 16:11:57,661 [main] DEBUG c.p.a.service.PriceService - Selected price with priority 0 and value 35.50

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2020-06-14T21:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"productId":35455,"brandId":1,"priceList":1,"startDate":[2020,6,14,0,0],"endDate":[2020,12,31,23,59,59],"price":35.5}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturnPriceAt10AMOnDay15" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.015">
    <failure message="Got a list of values [2020,6,15,0,0] instead of the expected single value 2020-06-15T00:00:00" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Got a list of values [2020,6,15,0,0] instead of the expected single value 2020-06-15T00:00:00
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:154)
	at org.springframework.test.web.servlet.result.JsonPathResultMatchers.lambda$value$2(JsonPathResultMatchers.java:112)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturnPriceAt10AMOnDay15(PriceAcceptanceTest.java:114)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,675 [main] DEBUG c.p.i.a.in.web.PriceController - Request to getProductPrice: applicationDate=2020-06-15T10:00, productId=35455, brandId=1
2025-05-26 16:11:57,675 [main] DEBUG c.p.a.service.PriceService - Getting applicable price for brand: 1, product: 35455, date: 2020-06-15T10:00
2025-05-26 16:11:57,676 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
2025-05-26 16:11:57,678 [main] DEBUG c.p.a.service.PriceService - Selected price with priority 1 and value 30.50

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2020-06-15T10:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"productId":35455,"brandId":1,"priceList":3,"startDate":[2020,6,15,0,0],"endDate":[2020,6,15,11,0],"price":30.5}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
  <testcase name="shouldReturnPriceAt9PMOnDay16" classname="com.pruebaItx.acceptance.PriceAcceptanceTest" time="0.015">
    <failure message="Got a list of values [2020,6,15,16,0] instead of the expected single value 2020-06-15T16:00:00" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Got a list of values [2020,6,15,16,0] instead of the expected single value 2020-06-15T16:00:00
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:39)
	at org.springframework.test.util.JsonPathExpectationsHelper.assertValue(JsonPathExpectationsHelper.java:154)
	at org.springframework.test.web.servlet.result.JsonPathResultMatchers.lambda$value$2(JsonPathResultMatchers.java:112)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.pruebaItx.acceptance.PriceAcceptanceTest.shouldReturnPriceAt9PMOnDay16(PriceAcceptanceTest.java:134)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
]]></failure>
    <system-out><![CDATA[2025-05-26 16:11:57,690 [main] DEBUG c.p.i.a.in.web.PriceController - Request to getProductPrice: applicationDate=2020-06-16T21:00, productId=35455, brandId=1
2025-05-26 16:11:57,691 [main] DEBUG c.p.a.service.PriceService - Getting applicable price for brand: 1, product: 35455, date: 2020-06-16T21:00
2025-05-26 16:11:57,691 [main] DEBUG org.hibernate.SQL - 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
Hibernate: 
    select
        pe1_0.id,
        pe1_0.brand_id,
        pe1_0.curr,
        pe1_0.end_date,
        pe1_0.price,
        pe1_0.price_list,
        pe1_0.priority,
        pe1_0.product_id,
        pe1_0.start_date 
    from
        prices pe1_0 
    where
        pe1_0.brand_id=? 
        and pe1_0.product_id=? 
        and pe1_0.start_date<=? 
        and pe1_0.end_date>=? 
    order by
        pe1_0.priority desc
2025-05-26 16:11:57,693 [main] DEBUG c.p.a.service.PriceService - Selected price with priority 1 and value 38.95

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /api/v1/prices
       Parameters = {applicationDate=[2020-06-16T21:00:00], productId=[35455], brandId=[1]}
          Headers = [Content-Type:"application/json;charset=UTF-8"]
             Body = null
    Session Attrs = {}

Handler:
             Type = com.pruebaItx.infrastructure.adapter.in.web.PriceController
           Method = com.pruebaItx.infrastructure.adapter.in.web.PriceController#getPrice(LocalDateTime, Long, Long)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json"]
     Content type = application/json
             Body = {"productId":35455,"brandId":1,"priceList":4,"startDate":[2020,6,15,16,0],"endDate":[2020,12,31,23,59,59],"price":38.95}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  </testcase>
</testsuite>