/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pruebaItx.web.application.interfaces;

import com.pruebaItx.web.application.entities.ErrorResource;
import com.pruebaItx.web.application.entities.GetAvailableCriteria200Response;
import com.pruebaItx.web.application.entities.ProductsSorted200Response;
import com.pruebaItx.web.application.entities.SortingCriteriaRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Product", description = "the Product API")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /product/criteria : Available Sorting Criteria.
     *
     * @return Success (status code 200)
     *         or Bad request. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden. (status code 403)
     *         or Not Found. (status code 404)
     *         or Internal Server Error. (status code 500)
     */
    @Operation(
        operationId = "getAvailableCriteria",
        summary = "Available Sorting Criteria.",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAvailableCriteria200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/criteria",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetAvailableCriteria200Response> getAvailableCriteria(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"name\" : \"Sales Units\", \"description\" : \"Scores products based on number of units sold\", \"id\" : \"salesUnits\" }, { \"name\" : \"Sales Units\", \"description\" : \"Scores products based on number of units sold\", \"id\" : \"salesUnits\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /product : Products Sorted (using headers).
     *
     * @param saleFactor Factor to ponderate sales Units (required)
     * @param stockFactor Factor to ponderate stock Units (required)
     * @return Success (status code 200)
     *         or Bad request. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden. (status code 403)
     *         or Not Found. (status code 404)
     *         or Internal Server Error. (status code 500)
     */
    @Operation(
        operationId = "productsSorted",
        summary = "Products Sorted (using headers).",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductsSorted200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProductsSorted200Response> productsSorted(
        @NotNull @Max(99999) @Parameter(name = "saleFactor", description = "Factor to ponderate sales Units", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "saleFactor", required = true) Integer saleFactor,
        @NotNull @Max(99999) @Parameter(name = "stockFactor", description = "Factor to ponderate stock Units", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "stockFactor", required = true) Integer stockFactor
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"name\" : \"Long slouchy pants\", \"id\" : 12345, \"stock\" : { \"sizeS\" : 888, \"sizeM\" : 888, \"sizeL\" : 888 }, \"sales\" : 888 }, { \"name\" : \"Long slouchy pants\", \"id\" : 12345, \"stock\" : { \"sizeS\" : 888, \"sizeM\" : 888, \"sizeL\" : 888 }, \"sales\" : 888 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /product : Products Sorted (using request body).
     *
     * @param sortingCriteriaRequest Sorting criteria with weights (required)
     * @return Success (status code 200)
     *         or Bad request. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden. (status code 403)
     *         or Not Found. (status code 404)
     *         or Internal Server Error. (status code 500)
     */
    @Operation(
        operationId = "productsSortedWithBody",
        summary = "Products Sorted (using request body).",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductsSorted200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/product",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProductsSorted200Response> productsSortedWithBody(
        @Parameter(name = "SortingCriteriaRequest", description = "Sorting criteria with weights", required = true) @Valid @RequestBody SortingCriteriaRequest sortingCriteriaRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : [ { \"name\" : \"Long slouchy pants\", \"id\" : 12345, \"stock\" : { \"sizeS\" : 888, \"sizeM\" : 888, \"sizeL\" : 888 }, \"sales\" : 888 }, { \"name\" : \"Long slouchy pants\", \"id\" : 12345, \"stock\" : { \"sizeS\" : 888, \"sizeM\" : 888, \"sizeL\" : 888 }, \"sales\" : 888 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorType\" : \"ERROR\", \"errorMessage\" : \"The parameters entered are not valid\", \"errorCode\" : 8009, \"errorCodeMsg\" : \"errorCodeMsg\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
