/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.pruebaItx.web.application.interfaces;

import org.springframework.format.annotation.DateTimeFormat;
import com.pruebaItx.web.application.entities.ErrorResponse;
import java.time.LocalDateTime;
import com.pruebaItx.web.application.entities.PriceResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Price", description = "the Price API")
public interface PriceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/prices : Get applicable price
     * Returns the applicable price for a product based on application date, product ID and brand ID
     *
     * @param applicationDate Date and time when the price should be applied (ISO 8601 format) (required)
     * @param productId Product identifier (required)
     * @param brandId Brand identifier (1 &#x3D; ZARA) (required)
     * @return Price found successfully (status code 200)
     *         or Invalid request parameters (status code 400)
     *         or Price not found for the given parameters (status code 404)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "getPrice",
        summary = "Get applicable price",
        description = "Returns the applicable price for a product based on application date, product ID and brand ID",
        tags = { "Price" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Price found successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PriceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Price not found for the given parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/prices",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PriceResponse> getPrice(
        @NotNull @Parameter(name = "applicationDate", description = "Date and time when the price should be applied (ISO 8601 format)", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "applicationDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime applicationDate,
        @NotNull @Parameter(name = "productId", description = "Product identifier", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "productId", required = true) Long productId,
        @NotNull @Parameter(name = "brandId", description = "Brand identifier (1 = ZARA)", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "brandId", required = true) Long brandId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"productId\" : 35455, \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"price\" : 35.5, \"brandId\" : 1, \"currency\" : \"EUR\", \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"priceList\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/v1/prices\", \"error\" : \"PRICE_NOT_FOUND\", \"message\" : \"No price found for the given parameters\", \"timestamp\" : \"2023-10-01T10:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/v1/prices\", \"error\" : \"PRICE_NOT_FOUND\", \"message\" : \"No price found for the given parameters\", \"timestamp\" : \"2023-10-01T10:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/api/v1/prices\", \"error\" : \"PRICE_NOT_FOUND\", \"message\" : \"No price found for the given parameters\", \"timestamp\" : \"2023-10-01T10:00:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
